// Code generated by github.com/go-enry/go-enry/v2/internal/code-generator DO NOT EDIT.
// Extracted from github/linguist commit: 7ca3799b8b5f1acde1dd7a8dfb7ae849d3dfb4cd

package data

import "strings"

// LanguageByAliasMap keeps alias for different languages and use the name of the languages as an alias too.
// All the keys (alias or not) are written in lower case and the whitespaces has been replaced by underscores.
var LanguageByAliasMap = map[string]string{
	"bash":          "Shell",
	"bat":           "Batchfile",
	"batch":         "Batchfile",
	"batchfile":     "Batchfile",
	"c#":            "C#",
	"c++":           "C++",
	"cake":          "C#",
	"cakescript":    "C#",
	"clojure":       "Clojure",
	"coffee":        "CoffeeScript",
	"coffee-script": "CoffeeScript",
	"coffeescript":  "CoffeeScript",
	"containerfile": "Dockerfile",
	"cperl":         "Perl",
	"cpp":           "C++",
	"csharp":        "C#",
	"css":           "CSS",
	"dockerfile":    "Dockerfile",
	"dosbatch":      "Batchfile",
	"dosini":        "INI",
	"f#":            "F#",
	"fsharp":        "F#",
	"fundamental":   "Text",
	"go":            "Go",
	"golang":        "Go",
	"handlebars":    "Handlebars",
	"hbs":           "Handlebars",
	"html":          "HTML",
	"htmlbars":      "Handlebars",
	"inc":           "PHP",
	"ini":           "INI",
	"java":          "Java",
	"javascript":    "JavaScript",
	"jruby":         "Ruby",
	"js":            "JavaScript",
	"less":          "Less",
	"less-css":      "Less",
	"lua":           "Lua",
	"macruby":       "Ruby",
	"markdown":      "Markdown",
	"md":            "Markdown",
	"node":          "JavaScript",
	"obj-c":         "Objective-C",
	"objc":          "Objective-C",
	"objective-c":   "Objective-C",
	"objectivec":    "Objective-C",
	"pandoc":        "Markdown",
	"perl":          "Perl",
	"php":           "PHP",
	"plain_text":    "Text",
	"posh":          "PowerShell",
	"powershell":    "PowerShell",
	"pug":           "Pug",
	"pwsh":          "PowerShell",
	"python":        "Python",
	"python3":       "Python",
	"r":             "R",
	"rake":          "Ruby",
	"rb":            "Ruby",
	"rbx":           "Ruby",
	"rs":            "Rust",
	"rscript":       "R",
	"rss":           "XML",
	"ruby":          "Ruby",
	"rust":          "Rust",
	"rusthon":       "Python",
	"scheme":        "Scheme",
	"scss":          "SCSS",
	"sh":            "Shell",
	"shell":         "Shell",
	"shell-script":  "Shell",
	"solidity":      "Solidity",
	"splus":         "R",
	"sql":           "SQL",
	"swift":         "Swift",
	"text":          "Text",
	"ts":            "TypeScript",
	"typescript":    "TypeScript",
	"winbatch":      "Batchfile",
	"wsdl":          "XML",
	"xhtml":         "HTML",
	"xml":           "XML",
	"xsd":           "XML",
	"yaml":          "YAML",
	"yml":           "YAML",
	"zsh":           "Shell",
}

// LanguageByAlias looks up the language name by it's alias or name.
// It mirrors the logic of github linguist and is needed e.g for heuristcs.yml
// that mixes names and aliases in a language field (see XPM example).
func LanguageByAlias(langOrAlias string) (lang string, ok bool) {
	k := convertToAliasKey(langOrAlias)
	lang, ok = LanguageByAliasMap[k]
	return
}

// convertToAliasKey converts language name to a key in LanguageByAliasMap.
// Following
//   - internal.code-generator.generator.convertToAliasKey()
//   - GetLanguageByAlias()
//
// conventions.
// It is here to avoid dependency on "generate" and "enry" packages.
func convertToAliasKey(langName string) string {
	ak := strings.SplitN(langName, `,`, 2)[0]
	ak = strings.Replace(ak, ` `, `_`, -1)
	ak = strings.ToLower(ak)
	return ak
}
